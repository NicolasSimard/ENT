/* This script implements the L-function attached to the kronecker symbol
of an imaginary quadratic field.

This character is odd if the discriminant is negative and even otherwise.

Note that the sign is always one since chi_D is real. See comment after
def 2.2.25 in Cohen - Num thy Vol 1.
*/

read("../computel");                 \\ read the ComputeL package
                                  \\ and set the default values

disc = -4;                     \\ Any quadratic field discriminant
cond = abs(disc);

if(disc%4 > 1, error("Not a discriminant!"));

chi_D(n) = kronecker(disc,n); \\ The kronecker symbol

conductor = cond;                         \\ exponential factor
gammaV    = [if(chi_D(-1) == 1, 0, 1)];   \\ depends on the sign of chi_D
weight    = 1;                            \\ L(s)=sgn*L(weight-s)
sgn       = 1;                            \\ = gausssum/I/sqrt(disc)

initLdata("chi_D(k)");

print("EXAMPLE: L(s)=L(Chi_D,s), Chi=kronecker symbol of conductor ",disc);
print("         with ",default(realprecision)," digits precision");
print("Verifying functional equation. Error: ",errprint(checkfeq(1.1)));
print("L(Chi_D,2)  = ",L(2));
print("  (check)   = ",L(2,1.1));
\\print("L(Chi_D,I)  = ",L(I));
\\print("  (check)   = ",L(I,1.1));

print("Compute L(Chi_D,1) with computel=",L(1));
print("(check)                         =",L(1,1.1));
K = bnfinit(y^2-disc);
CNFvalue = 2^K.r1*(2*Pi)^K.r2*K.reg*K.clgp.no/K.tu[1]/sqrt(abs(disc));
print("Compute L(Chi_D,1) with CNF     =",CNFvalue);
gausssum = sum(k=1,cond,chi_D(k)*exp(2*Pi*I*k/cond));
value = {
    if(chi_D(-1) == 1,
        -gausssum/cond*sum(n=1,cond-1,chi_D(n)*log(abs(1-exp(2*Pi*I*n/cond)))),
        -Pi*gausssum/I/cond^2*sum(n=1,cond,chi_D(n)*n));
}
print("Compute L(Chi_D,1) analytically =",value);

/*Computes L(chi_D,s), where chi_D is the Kronecker symbol (D/*).
It uses the formula of theorem 10.2.14 (p.195).*/

Ldirect(D,s,A) = {
    local(m,e,S);
    m=abs(D);
    e=if(chi_D(-1) == 1, 0, 1);
    if(D%4 > 1, error("Not implemented!"));
    S=suminf(n=1,kronecker(D,n)/n^s*incgam((s+e)/2,Pi*n^2*A/m))+\
    (m/Pi)^(1/2-s)*suminf(n=1,conj(kronecker(D,n))/n^(1-s)*\
                   incgam((1-s+e)/2,Pi*n^2/A/m));
    S/gamma((s+e)/2);
}

print("Using a formula of Cohen        =",Ldirect(disc,1,1.2));